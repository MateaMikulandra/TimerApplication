/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.JSpinner.DateEditor;
import javax.swing.SpinnerDateModel;
import javax.swing.Timer;
import javax.swing.colorchooser.AbstractColorChooserPanel;

/**
 *
 * @author Kiki
 */
public class Settings extends javax.swing.JFrame {

    /**
     * Creates new form Settings
     */
    Boolean time = false;
    Boolean count = false;
    Color color = null;
    JFrame thisFrame = this;
    Timer mainTimer;
    DateEditor de; 
    
    public Settings() {
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentColor = new javax.swing.JLabel();
        speedLabel = new javax.swing.JLabel();
        btnStop = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        spdSlider = new javax.swing.JSlider();
        timeChk = new javax.swing.JCheckBox();
        countdownChk = new javax.swing.JCheckBox();
        colorBtn = new javax.swing.JButton();
        timeSpinner = new javax.swing.JSpinner();
        countdownSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        currentColor.setText("no color selected");

        speedLabel.setText("Speed:");

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        timeChk.setText("on time");
        timeChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeChkActionPerformed(evt);
            }
        });

        countdownChk.setText("countdown");
        countdownChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countdownChkActionPerformed(evt);
            }
        });

        colorBtn.setText("Choose color");
        colorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 136, Short.MAX_VALUE)
                        .addComponent(btnStart)
                        .addGap(85, 85, 85)
                        .addComponent(btnStop)
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(currentColor)
                        .addGap(70, 70, 70))
                    .addComponent(spdSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeChk)
                            .addComponent(speedLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(countdownChk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(countdownSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeChk)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countdownChk)
                    .addComponent(countdownSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorBtn)
                    .addComponent(currentColor))
                .addGap(47, 47, 47)
                .addComponent(speedLabel)
                .addGap(2, 2, 2)
                .addComponent(spdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStop)
                    .addComponent(btnStart))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void colorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBtnActionPerformed
        
            JColorChooser jcc = new JColorChooser();
            AbstractColorChooserPanel[] oldPanels = jcc.getChooserPanels();
            for (int i = 0; i < oldPanels.length; i++) {
                if (!oldPanels[i].getDisplayName().equals("RGB")) {
                   jcc.removeChooserPanel(oldPanels[i]);
                }

						}
            color = jcc.showDialog(null, "Choose", Color.yellow);
            currentColor.setText("R:"+color.getRed()+"G:"+color.getGreen()+"B:"+color.getBlue());
    }//GEN-LAST:event_colorBtnActionPerformed

    private void timeChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeChkActionPerformed
        time = timeChk.isSelected();
        if (time) {
            countdownChk.setEnabled(false);
            countdownSpinner.setEnabled(false);
        }else{
            countdownChk.setEnabled(true);
            countdownSpinner.setEnabled(true);
        }
        
 
    }//GEN-LAST:event_timeChkActionPerformed

    private void countdownChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countdownChkActionPerformed
        count = countdownChk.isSelected();
         if (count) {
            timeChk.setEnabled(false);
            timeSpinner.setEnabled(false);
        }else{
            timeChk.setEnabled(true);
            timeSpinner.setEnabled(true);
        }
    }//GEN-LAST:event_countdownChkActionPerformed

    private void disableComponents(JFrame parent){
      Component[] array = parent.getContentPane().getComponents();
        for (int i = 0; i < array.length; i++) {
           if(array[i] instanceof JButton){
                JButton button = (JButton) array[i];
                String text = button.getText();
                if (text.equals("Stop")) {
                  continue;
               }
               array[i].setEnabled(false);  
       }else{
               array[i].setEnabled(false);
           }
  
        }
    }
    
    private void enableAllComponents(JFrame parent){
      Component[] array = parent.getContentPane().getComponents();
        for (int i = 0; i < array.length; i++) {
            
            array[i].setEnabled(true);
        }
    }
    
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed

        disableComponents(thisFrame);
       
        Window w = new Window();
        
        Timer t = new Timer(spdSlider.getValue(), new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               Container c = w.getContentPane();
                if (c.getBackground().getRGB() == Color.WHITE.getRGB()) {
                    c.setBackground(color);
                }else{
                   c.setBackground(Color.WHITE); 
                }
                 
            }
        });
        
        
        Container c = w.getContentPane();
        c.setBackground(Color.WHITE);
        
        if(time){
            int result = 0;
            try {
               
                Date date = new Date();
                String oldDate =de.getFormat().format(date);
                String newDate =de.getFormat().format(timeSpinner.getValue());
                
                SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                Date d1 = sdf.parse(oldDate);
                Date d2 = sdf.parse(newDate);
                long oldMilis = d1.getTime();
                long newMilis = d2.getTime();
                result = (int) (newMilis - oldMilis);
                
                
            } catch (ParseException ex) {
                Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
            }
                
                mainTimer = new Timer(result, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                w.setVisible(true);
                t.setRepeats(true);
                t.start();
                
                }
                });
                
                
                mainTimer.start();
                
            
        }else{
            
          int i = (int)countdownSpinner.getValue() * 60000;
         
            mainTimer = new Timer(i, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
          
           w.setVisible(true);
          t.setRepeats(true);  
          t.start();
                 
            }
        });
  
            
         mainTimer.start();
        }
        
       

        // TODO add your handling code here:
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        if(mainTimer.isRunning()){
            mainTimer.stop();
        }
        enableAllComponents(thisFrame);
    }//GEN-LAST:event_btnStopActionPerformed
    private void setup(){
        
        Date date = new Date();
    timeSpinner.setModel(new SpinnerDateModel(date,null,null,Calendar.MINUTE));
       de = new JSpinner.DateEditor(timeSpinner, "HH:mm:ss"); 
       
       timeSpinner.setEditor(de); 
       spdSlider.setMinimum(100);
       spdSlider.setMaximum(3000);
       Hashtable labels = new Hashtable();
        labels.put(100, new JLabel("100"));
        labels.put(3000, new JLabel("3000"));
        spdSlider.setLabelTable(labels);
        spdSlider.setPaintLabels(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Settings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Settings().setVisible(true);
                
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton colorBtn;
    private javax.swing.JCheckBox countdownChk;
    private javax.swing.JSpinner countdownSpinner;
    private javax.swing.JLabel currentColor;
    private javax.swing.JSlider spdSlider;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JCheckBox timeChk;
    private javax.swing.JSpinner timeSpinner;
    // End of variables declaration//GEN-END:variables
}
